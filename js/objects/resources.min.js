/**
 * Definición de Objeto Model para todos los recursos de un <noteboard>. 
 * Este objetos hereda el objeto <Observable>, permitiendo implementar 
 * métodos del patrón "observer".
 * 
 * @param Object data Objeto de datos que contiene la información del recurso al que estará con el modelo.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
Model.prototype = new Observable();
function Model( data, noteboard ) {
	this.noteboard = noteboard;
	this.data = data || {};

	this.data.bg		= data.bg || 'yellow';
	this.data.c			= data.c  || '000000';
	this.data.comments	= data.comments || 0;
	this.data.creator  	= data.user || this.noteboard.user;
	this.data.fs		= data.fs || '1em';
	this.data.ff		= data.ff || 'paprika';
	this.data.h			= data.h  || 200;
	this.data.id		= data.id || 't' + this.noteboard.autoincrement();
	this.data.index 	= data.index || this.noteboard.maxIndex;
	this.data.isNew 	= (data.isNew != undefined) ? data.isNew : false;
	this.data.l			= data.l  || 0;
	this.data.msg		= data.msg|| '';
	this.data.noteboardId = this.noteboard.id
	this.data.realTime 	= (data.realTime != undefined) ? data.realTime : false;
	this.data.t			= data.t  || 50;
	this.data.w			= data.w  || 200;
	this.data.locked	= false;
	this.data.dragging	= false;

	// Asegura que el recurso quede dentro del noteboard
	this.setPosition(this.data.l, this.data.t);

	// Se agrega al conjunto de modelos del noteboard
	this.noteboard.models.push(this);

	if (!this.data.realTime)
		this.noteboard.sandbox.emit('resource-add', this);
}

/**
 * Modifica el id del recurso en el DOM
 * 
 * @param int id Nuevo Id del recurso.
 */
Model.prototype.setId = function( id ) {
	this.noteboard.sandbox.emit('resource-id', { 'id': this.data.id, 'newId': id });
	
	this.data.id = id;

	this.trigger('resource-id', this.data.id);
	this.noteboard.sandbox.emit('resource-add-socket', this.data);
}

/**
 * Permite determinar si dos modelos son iguales. Dos modelos
 * son iguales cuando su id's es el mismo.
 * 
 * @param  Model model Instancia de modelo a comparar
 * 
 * @return boolean <true> si los objetos son iguales, de lo contrario <false>
 */
Model.prototype.equals = function( model ) {
	return (this.data.id == model.data.id);
}

/**
 * Permite cambiar la posición de un recurso de acuerdo a los parámetros especificados.
 * El cambio verifica que el recurso no quede por fuera de los límites del <noteboard>.
 * 
 * @param int l Valor de la posición <left> del recurso sobre el <noteboard>
 * @param int t Valor de la posición <top> del recurso sobre el <noteboard>
 */
Model.prototype.setPosition = function(l, t) {
	this.data.l = l;
	this.data.t = t;

	if (this.data.l < 0) this.data.l = 0;
	if (this.data.t < 0) this.data.t = 0;

	if ((this.data.l + this.data.w) > this.noteboard.target.width()) {
		this.data.l = this.noteboard.target.width() - this.data.w;
	}

	if ((this.data.t + this.data.h) > this.noteboard.target.height()) {
		this.data.t = this.noteboard.target.height() - this.data.h;
	}

	this.trigger('resource-position', this.data.l, this.data.t);
}

/**
 * Cambia el tamaño del recurso de acuerdo a los parámetros especificados.
 * 
 * @param int w Ancho (width) nuevo del recurso.
 * @param int h Alto (height) nuevo del recruso.
 */
Model.prototype.setSize  = function(w, h) {
	this.data.w = w;
	this.data.h = h;

	this.trigger('resource-resize', w, h);
}

/**
 * Gestiona el evento "drop" del recurso. Este evento de drop es lanzado por jQuery UI.
 * 
 * @param  Event event Evento de drop
 * @param  Object ui    Objeto de datos del evento
 */
Model.prototype.dragging = function(event, ui) {

	var self = this
		,offsetX = ui.position.left - ui.originalPosition.left
		,offsetY = ui.position.top - ui.originalPosition.top;

	self.setPosition(ui.position.left, ui.position.top);
	
	this.noteboard.selectedNotes.forEach(function(model) {
		if (!self.equals(model)) {
			if (!model.originalPosition)
				model.originalPosition = { 'top': model.data.t, 'left': model.data.l };

			model.setPosition(model.originalPosition.left + offsetX, model.originalPosition.top + offsetY);
		}
	});
}

/**
 * Evento lanzado cuando "drop" se detiene.
 * 
 * @param  Event event Evento de stop
 * @param  Object ui    Objeto de datos del evento
 */
Model.prototype.dropping = function(event, ui) {
	var self = this
		,notes = [];

	this.noteboard.selectedNotes.forEach(function(model) {
		if (!self.equals(model)) {
			model.originalPosition = undefined;

			notes.push({
				'id': model.data.id,
				'left': model.data.l,
				'top': model.data.t
			});
		}
	});

	notes.push({
		'id': self.data.id,
		'left': self.data.l,
		'top': self.data.t
	});

	var params = {
		notes: notes,
		noteboardid: this.noteboard.id
	}

	this.noteboard.sandbox.emit('resource-move', params);
}

/**
 * Evento lanzado cuando se está cambiando el tamaño de un recurso mediante
 * el elemento de <resize>
 * 
 * @param  Event event Evento de drop
 * @param  Object ui    Objeto de datos del evento
 */
Model.prototype.draggingResize = function(event, ui) {
	var self = this,
	 	minSize = 80;

	if (ui.position.left < minSize)
		ui.position.left = minSize;

	if (ui.position.top < minSize)
		ui.position.top = minSize;

	var w = ui.position.left + 10
		,h = ui.position.top + 10;

	if (this.data.fs == 'image' || this.data.fs == 'circle')
		h = (this.data.h / this.data.w) * w;

	this.setSize(w, h);

	this.noteboard.selectedNotes.forEach(function(model) {
		if (!self.equals(model) && model.data.fs != 'comment') {
			if (model.data.fs == 'image' || model.data.fs == 'circle')
				h = (model.data.h / model.data.w) * w;

			model.setSize(w, h);
		}
	});
}

/**
 * Evento lanzado cuando "drop" del elemento <resize> se detiene.
 * 
 * @param  Event event Evento de stop
 * @param  Object ui    Objeto de datos del evento
 */
Model.prototype.droppingResize = function(event, ui) {
	var self = this
		,notes = [];

	this.noteboard.selectedNotes.forEach(function(model) {
		if (!self.equals(model)) {
			notes.push({
				'id': model.data.id,
				'width': model.data.w,
				'height': model.data.h
			});
		}
	});

	notes.push({
		'id': self.data.id,
		'width': self.data.w,
		'height': self.data.h
	});

	var params = {
		notes: notes,
		noteboardid: this.noteboard.id
	}

	this.noteboard.sandbox.emit('resource-resize', params);
}

/**
 * Añade o elimina el recurso en cuestión, al arreglo de recursos seleccionados
 * del al módulo "noteboard";
 * 
 * @param  Event e Evento de click sobre el recurso
 */
Model.prototype.selectingResource = function(e) {
	if (this.data.locked) return;
	
	var self = this
		,flag = true;

	if (e.type == 'click' && !e.shiftKey)
		this.noteboard.unselectResources();

	this.noteboard.selectedNotes.forEach(function(note, idx) {
		if (self.equals(note) && e.shiftKey) {
			self.noteboard.selectedNotes.splice(idx, 1);
			flag = false;
			return;
		}
	});

	if (flag) this.noteboard.selectedNotes.push(this);

	this.trigger('resource-selecting', flag);
}

/**
 * Incrementa en una unidad el index (css) del recurso en cuestión.
 *
 * @param Object args Objetos de parámetros
 *                    Obj -> {realTime}
 */
Model.prototype.incrementIndex = function(args) {
	this.noteboard.maxIndex++;
	this.data.index = this.noteboard.maxIndex;

	this.trigger('resource-index', this.data.index);

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-forward', { 'id': this.data.id } );
}

/**
 * Disminuye en una unidad el index (css) del recurso en cuestión.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {realTime}
 */
Model.prototype.decrementIndex = function(args) {
	this.noteboard.minIndex--;
	this.data.index = this.noteboard.minIndex;

	this.trigger('resource-index', this.data.index);

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-back', { 'id': this.data.id } );
}

/**
 * Cambia el mensaje de la nota.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {msg, realTime}
 */
Model.prototype.setMsg = function(args) {
	this.data.msg = args.msg;

	if (args.realTime) {
		this.trigger('resource-msg', this.data.msg);

	} else {
    	this.noteboard.sandbox.emit('resource-msg', { 'id': this.data.id, 'msg': this.data.msg } );
	}
}

/**
 * Cambia el color de la nota.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {bg, realTime}
 */
Model.prototype.setBG = function(args) {
	var self = this
		,notes = [];

	if (!args.realTime)
		this.noteboard.selectedNotes.forEach(function(model) {
			if (!self.equals(model)) {
				model.data.bg = args.bg;
				model.trigger('resource-bg', model.data.bg);

				notes.push({
					'id': model.data.id,
					'bg': model.data.bg
				});
			}
		});

	this.data.bg = args.bg;
	this.trigger('resource-bg', this.data.bg);

	notes.push({
		'id': this.data.id,
		'bg': this.data.bg
	});

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-bg', { notes: notes, noteboardid: this.noteboard.id });
}

/**
 * Cambia el tipo de fuente de la nota.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {ff, realTime}
 */
Model.prototype.setFF = function(args) {
	var self = this
		,notes = [];

	if (!args.realTime)
		this.noteboard.selectedNotes.forEach(function(model) {
			if (!self.equals(model)) {
				model.data.ff = args.ff;
				model.trigger('resource-ff', model.data.ff);

				notes.push({
					'id': model.data.id,
					'ff': model.data.ff
				});
			}
		});

	this.data.ff = args.ff;
	this.trigger('resource-ff', this.data.ff);

	notes.push({
		'id': this.data.id,
		'ff': this.data.ff
	});

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-ff', { notes: notes, noteboardid: this.noteboard.id });
}

/**
 * Cambia el tamaño de la fuente de la nota.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {fs, realTime}
 */
Model.prototype.setFS = function(args) {
	var self = this
		,notes = [];

	if (!args.realTime)
		this.noteboard.selectedNotes.forEach(function(model) {
			if (!self.equals(model)) {
				model.data.fs = args.fs;
				model.trigger('resource-fs', model.data.fs);

				notes.push({
					'id': model.data.id,
					'fs': model.data.fs
				});
			}
		});

	this.data.fs = args.fs;
	this.trigger('resource-fs', this.data.fs);

	notes.push({
		'id': this.data.id,
		'fs': this.data.fs
	});

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-fs', { notes: notes, noteboardid: this.noteboard.id });
}

/**
 * Cambia el color de fuente de la nota.
 * 
 * @param Object args Objetos de parámetros
 *                    Obj -> {c, realTime}
 */
Model.prototype.setC = function(args) {
	var self = this
		,notes = [];

	if (!args.realTime)
		this.noteboard.selectedNotes.forEach(function(model) {
			if (!self.equals(model)) {
				model.data.c = args.c;
				model.trigger('resource-c', model.data.c);

				notes.push({
					'id': model.data.id,
					'c': model.data.c
				});
			}
		});

	this.data.c = args.c;
	this.trigger('resource-c', this.data.c);

	notes.push({
		'id': this.data.id,
		'c': this.data.c
	});

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-c', { notes: notes, noteboardid: this.noteboard.id });
}

/**
 * Elimina el modelo y todo lo relacionado con él, además lo elimina
 * del arreglo de modelos del <noteboard>.
 */
Model.prototype.remove = function(args) {
	var self = this
		,notes = [];

	if (!args.realTime)
		this.noteboard.selectedNotes.forEach(function(model) {
			if (!self.equals(model)) {
				model.trigger('resource-remove');
				notes.push( {'id': model.data.id} );

				// Particularmente para <frame>
				if (model.data.fs == 'frame') {
					var index = model.data.msg-1;
					model.noteboard.areas.splice(index, 1);

					for(var i = index; i < model.noteboard.areas.length; i++) {
						var timelineArea = model.noteboard.areas[i];
						timelineArea.model.data.msg = timelineArea.model.data.msg - 1;
						timelineArea.model.trigger('resource-msg', timelineArea.model.data.msg);
					}
				}

				// Eliminando de arreglo de modelos
				self.noteboard.models.forEach(function(m, index){
					if (model == m) {
						model.data = undefined;
						model._events = undefined;
						self.noteboard.models.splice(index, 1);
					}
				});
			}
		});

	this.trigger('resource-remove');
	notes.push( {'id': this.data.id} );

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-remove', { notes: notes, noteboardid: this.noteboard.id });

	// Particularmente para <frame>
	if (this.data.fs == 'frame') {
		var index = this.data.msg-1;
		this.noteboard.areas.splice(index, 1);

		for(var i = index; i < this.noteboard.areas.length; i++) {
			var timelineArea = this.noteboard.areas[i];
			timelineArea.model.data.msg = timelineArea.model.data.msg - 1;
			timelineArea.model.trigger('resource-msg', timelineArea.model.data.msg);
		}
	}

	// Eliminando de arreglo de modelos
	this.noteboard.models.forEach(function(model, index){
		if (model == self) {
			model.data = undefined;
			model._events = undefined;
			self.noteboard.models.splice(index, 1);
		}
	});	
}

/**
 * Aumenta en una unidad el número de comentarios asociados al recurso.
 *
 * @param Object args Contiene los datos que serán enviados a los démás módulos
 *                    Obj-> {noteId, fullname, profileImage, msg}
 */
Model.prototype.addComment = function( args ) {
	this.data.comments++;

	this.trigger('resource-comment-add', args);

	if (!args.realTime)
		this.noteboard.sandbox.emit('resource-comment-add', args);
}

/**
 * Permite abrir la zona de archivos adjuntos.
 */
Model.prototype.attachZone = function(){
	this.trigger('resource-attach-zone');
	this.noteboard.sandbox.emit('resource-attach-zone');
}

/**
 * Bloquea o desbloquea el recurso al que está asociado el modelo
 *
 * @param boolean flag determina si se bloquea o desbloquea el recurso
 * @param Object user Objeto de datos de usuario
 */
Model.prototype.setLocked = function(flag, user) {
	var self = this;
	this.data.locked = flag;
	this.trigger('resource-locked', flag, user);

	this.noteboard.selectedNotes.forEach(function(model) {
		if (!self.equals(model)) {
			model.trigger('resource-locked', flag);
			model.data.locked = flag;
		}
	});
}


Model.prototype.attach = function() {
	this.noteboard.sandbox.emit('note-attach', {id: this.data.id});
}

/**
 * Cambia el index en el timeline del recurso asociado al modelo.
 * Este valor es almacenado en el campo msg del modelo.
 * 
 * @param Object args Contiene los datos que serán enviados a los démás módulos
 *                    Obj-> {id, index}
 */
Model.prototype.setIndexTimeline = function(args) {
	var min = Math.min(this.data.msg, args.index)
		,max = Math.max(this.data.msg, args.index)
		,timeline = this.noteboard.areas[this.data.msg - 1]
		,resources = [];

	if (this.data.msg > args.index) {
		for(var i = max - 1; i >= min ; i--) {
			var timelineArea = this.noteboard.areas[i-1];
			timelineArea.model.data.msg = timelineArea.model.data.msg + 1;
			timelineArea.model.trigger('resource-msg', timelineArea.model.data.msg);
			this.noteboard.areas[i] = timelineArea;

			resources.push({id: timelineArea.model.data.id, msg: timelineArea.model.data.msg});
		}

	} else {
		for(var i = min + 1; i <= max; i++) {
			var timelineArea = this.noteboard.areas[i-1];
			timelineArea.model.data.msg = timelineArea.model.data.msg - 1;
			timelineArea.model.trigger('resource-msg', timelineArea.model.data.msg);
			this.noteboard.areas[i-2] = timelineArea;

			resources.push({id: timelineArea.model.data.id, msg: timelineArea.model.data.msg});
		}
	}

	this.noteboard.areas[args.index-1] = timeline;
	this.data.msg = args.index;
	this.trigger('resource-msg', this.data.msg);

	resources.push({id: this.data.id, msg: this.data.msg});
    
    if (!args.realTime)
 		this.noteboard.sandbox.emit('resource-index-timeline', { 'id': this.data.id, 'index': args.index , 'resources': resources} );
}

;/**
 * Este objeto funciona como base para cualquier tipo de recurso que se desee añadir
 * a un <noteboard>,
 * 
 * @param Objet data Objeto de datos que contiene la información del recurso.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
function NoteboardResource( data, noteboard ) {
	var self = this;

	this.noteboard = noteboard;
	this.model = new Model( data, this.noteboard );
	this.view = this.View();

	// Añadiendo el recurso al noteboard
	this.noteboard.target.append( this.view.elems.template );

	// Escuchando eventos del modelo
	this.model.on('resource-id', function(name, id){ self.view.setId(id); });
	this.model.on('resource-position', function(name, l, t){ self.view.setPosition(l, t) });
	this.model.on('resource-resize', function(name, w, h){ self.view.setSize(w, h) });
	this.model.on('resource-remove', function(name){ self.view.remove() });
	this.model.on('resource-selecting', function(name, e){ self.view.selectingResource(e) });
	this.model.on('resource-index', function(name, index){ self.view.changeIndex(index) });
	this.model.on('resource-comment-add', function(name, args){ self.view.addComment(args) });
	this.model.on('resource-locked', function(name, args, user){ self.view.locked(args, user) });

	// Escuchando eventos de la vista
	this.view.on('resource-click', function(name, e){ self.model.selectingResource(e); });
	this.view.on('resource-dblclick', function(name, e){ self.model.incrementIndex({}) });
	this.view.on('resource-drag', function(name, event, ui){ self.model.dragging(event, ui) });
	this.view.on('resource-stop', function(name, event, ui){ self.model.dropping(event, ui) });
	this.view.on('resource-dragResize', function(name, event, ui){ self.model.draggingResize(event, ui) });
	this.view.on('resource-stopResize', function(name, event, ui){ self.model.droppingResize(event, ui) });
}
/**
 * Retorna el Objeto principal jQuery del recurso.
 * 
 * @return JQuery Objeto jQuery del recruso.
 */
NoteboardResource.prototype.template = function() {
	return this.view.elems.template;
}

/**
 * Permite definir la Vista genérica del Recurso. Este vista deberá
 * ser sobre-escrita por todos los objetos que hereden de éste.
 * 
 * @param Model model Instancia del módelo asociado a este objeto.
 *
 * @return View Retorna la definición del objeto View.
 */
NoteboardResource.prototype.View = function( model ) {
	View.prototype = new Observable();
	function View() {
		var self = this
			,pointerX
			,pointerY
			,noteboardTop 
	    	,noteboardLeft
	    	,noteboardHeight
	    	,noteboardWidth;

		this.noteboard = model.noteboard;
		this.dragging = false

		this.elems = {};
		this.elems.template = $('<div>', {Class: 'untResource'}).attr('id', 'n-' + model.data.id).attr('data-id', model.data.id).data('model', model);
		this.elems.header   = $('<div>', {Class: 'untNoteHeader'}).appendTo( this.elems.template );
 		this.elems.resize   = $('<div>', {Class: 'untNoteResize'}).appendTo( this.elems.template );
 		this.elems.comment  = $('<div>', {Class: 'untNoteComment icon-bubbles'}).appendTo( this.elems.header );
 		this.elems.shadow 	= $('<div>', {Class: 'shadow ei-bottom-left-shadow'}).appendTo( this.elems.template); 		
 		
 		
 		// Configurando Template
 		this.elems.template
	 		.css({
				height: model.data.h,
				left: model.data.l + 'px',
				position: 'absolute',
				top: model.data.t + 'px',
				width: model.data.w,
				'z-index': model.data.index
			})
			.on('click', function(e) { 
				(!model.data.dragging && self.noteboard.state == self.noteboard.states.POINTER) ? self.trigger('resource-click', e) : model.data.dragging = false;
				return false; 
			})
			// .on('dblclick', function(e) { self.trigger('resource-dblclick', e); return false; })
			.draggable({
							containment: 'parent',
							start: function(evt, ui) {
								pointerY = (evt.pageY - self.noteboard.target.offset().top) / self.noteboard.scale - parseInt($(evt.target).css('top'));
								pointerX = (evt.pageX - self.noteboard.target.offset().left) / self.noteboard.scale - parseInt($(evt.target).css('left'));
								
								ui.originalPosition.top = ui.originalPosition.top / self.noteboard.scale;
								ui.originalPosition.left = ui.originalPosition.left / self.noteboard.scale;
								
								noteboardTop = self.noteboard.target.offset().top;
						    	noteboardLeft = self.noteboard.target.offset().left;
						    	noteboardHeight = self.noteboard.target.height();
						    	noteboardWidth = self.noteboard.target.width();

						    	model.data.dragging = true;
							},
							drag: function(evt, ui) {
								
								// Fix for noteboard.scale
							    ui.position.top = Math.round((evt.pageY - noteboardTop) / self.noteboard.scale - pointerY);
							    ui.position.left = Math.round((evt.pageX - noteboardLeft) / self.noteboard.scale - pointerX);

							    // Check if element is outside noteboard
							    if (ui.position.left < 0) ui.position.left = 0;
							    if (ui.position.left + $(this).width() > noteboardWidth) ui.position.left = noteboardWidth - $(this).width();  
							    if (ui.position.top < 0) ui.position.top = 0;
							    if (ui.position.top + $(this).height() > noteboardHeight) ui.position.top = noteboardHeight - $(this).height();  

							    // Finally, make sure offset aligns with position
							    ui.offset.top = Math.round(ui.position.top + noteboardTop);
							    ui.offset.left = Math.round(ui.position.left + noteboardLeft);

							    self.trigger('resource-drag', evt, ui);
							},
							stop: function(evt, ui){
								self.trigger('resource-stop', evt, ui);
							}
					   })

			// Eventos que no generan cambio en el modelo
			.on('mouseover', function(e) { self.elems.comment.css('display', 'block'); })
			.on('mouseout', function(e) { 
											var qtip = self.elems.comment.attr('aria-describedby');
											
											if ($('#' + qtip).css('display') != 'block' && (!model.data.comments))
        										self.elems.comment.css('display', 'none');
										});

		this.elems.resize
			.on('click', function(){ return false; })
			.draggable({
				start: function(evt, ui) {
					pointerX = (self.elems.template.position().left / self.noteboard.scale) + 5;
					pointerY = (self.elems.template.position().top / self.noteboard.scale) + 5;

					noteboardTop = self.noteboard.target.offset().top;
				    noteboardLeft = self.noteboard.target.offset().left;
				    noteboardHeight = self.noteboard.target.height();
				    noteboardWidth = self.noteboard.target.width();
				},
				drag: function(evt, ui) {

				    // Fix for noteboard.scale
				    ui.position.top = Math.round((evt.pageY - noteboardTop) / self.noteboard.scale - pointerY);
				    ui.position.left = Math.round((evt.pageX - noteboardLeft) / self.noteboard.scale - pointerX);
				    
				    // Check if element is outside noteboard
				    if (ui.position.left < 0) ui.position.left = 0;
				    if (ui.position.left + $(this).width() > noteboardWidth) ui.position.left = noteboardWidth - $(this).width();  
				    if (ui.position.top < 0) ui.position.top = 0;
				    if (ui.position.top + $(this).height() > noteboardHeight) ui.position.top = noteboardHeight - $(this).height();  

				    // Finally, make sure offset aligns with position
				    ui.offset.top = Math.round(ui.position.top + noteboardTop);
				    ui.offset.left = Math.round(ui.position.left + noteboardLeft);

				    self.trigger('resource-dragResize', evt, ui);
				},				
				stop: function(event, ui){ 
											self.trigger('resource-stopResize', event, ui); 
											$(this).css({ 'bottom':'-15px', 'left': 'auto', 'right':'-15px', 'top': 'auto' });
										 }
			})
			.css('position', 'absolute');

		//QTip comments
		if (model.data.comments && model.data.comments > 0)
			this.elems.comment.html('<span>' + model.data.comments + '</span>');
		else
			this.elems.comment.hide();

    	if (!model.data.isNew)
    		this.applyQTip(this.elems.comment, model.data.id);
	}

	

	/**
	 * Modifica el Id del objeto DOM con el id especificado.
	 * 
	 * @param int id Nuevo id para el objeto DOM
	 */
	View.prototype.setId = function( id ) {
		this.elems.template
			.attr('id', 'n-' + id)
			.attr('data-id', id);

		this.applyQTip(this.elems.comment, id);
	}

	/**
	 * Aplica o elimina estilo de recurso seleccionado
	 * 
	 * @param  boolean flag Si es <true>, el estilo es aplicado, de lo contrario, es removido.
	 */
	View.prototype.selectingResource = function(flag) {
		(flag) ? this.elems.template.addClass('selected') : this.elems.template.removeClass('selected');
	}

	/**
	 * Cambia el index (css) del recurso en cuestión
	 * 
	 * @param  int index Nuevo index del elemento en el DOM.
	 */
	View.prototype.changeIndex = function(index) {
		this.elems.template.css('z-index', index);
	}

	/**
	 * Cambia la posición del recurso en cuestión
	 * 
	 * @param int l Valor <left> del elemento principal asociado.
	 * @param int t Valor <top> del elemento principal asociado.
	 */
	View.prototype.setPosition = function(l, t) {
		this.elems.template.css({ 'left': l, 'top': t });
	}

	/**
	 * Cambia el tamaño en el DOM del recurso en cuestión.
	 * 
	 * @param int w Valor <width> del elemento principal asociado.
	 * @param int h Valor <height> del elemento principal asociado.
	 */
	View.prototype.setSize = function(w, h) {
		this.elems.template.css({ 'width': w, 'height': h });
	}

	/**
	 * Elimina del DOM el template del recurso asociado.	 
	 */
	View.prototype.remove = function() {
		this.elems.template.remove();
	}

	/**
	 * Inhabilita o habilita todos las opciones de edición del recurso
	 * 
	 * @param boolean Determina si se habilita o no las opciones de edición del recurso.
	 * @param Object user Objeto de datos de usuario.
	 */
	View.prototype.locked = function(flag, user) {
		if (flag) {
			this.elems.template.draggable('disable');
			this.elems.template.css('cursor', 'inherit');
		} else {
			this.elems.template.draggable('enable');
			this.elems.template.css('cursor', 'move');
		}
	}

	/**
	 * Añade un nuevo comentario en el panel de comentarios del recurso
	 * con los datos asociados.
	 * 
	 * @param Object args Contiene los datos que serán enviados a los démás módulos
 	 *                    Obj-> {noteId, fullname, profileImage, msg}
 	 */
	View.prototype.addComment = function(args) {
		var qtip = this.elems.comment.attr('aria-describedby');
    		
		if (qtip != undefined)
			$('#' + qtip).find('.untCommentBlocks').data('jsp')
						 .getContentPane()
						 .append( views.commentBlock(args));

		this.elems.comment.html('<span>' + model.data.comments + '</span>');
		this.elems.comment.show();
	}

	/**
	 * Permite aplicar QTip al elemento especificado con contenido
	 * dinámica mediante ajax enviando como dato noteId el id 
	 * especificado
	 * 
	 * @param  JQuery comment  Objeto a aplicar qtip
	 * @param  int noteId Id de la nota en cuestión
	 */
	View.prototype.applyQTip = function(comment, noteId) {
		var self = this
			,flag = true;

        comment.qtip({
        	content: {
        		ajax: {
        			url: API + 'Comment/AllComments/' + noteId,
        			type: 'GET',
        			success: function(data, status) {
        				if (flag) { flag = false } else { return };

        				data = self.createQTip(data, noteId);

        				this.set('content.text', data);

        				data.find('.untCommentBlocks').jScrollPane({
				            showArrows: false,
				            maintainPosition: true,
				            stickToBottom: true,
				            autoReinitialise: true
				        });

				        data.find('.untCommentBlocks').data('jsp').scrollToY(10000);
        			}
        		}
        	},
        	show: 'click',
        	hide: 'click',
        	events: {
        		hidden: function(event, api) {
        			comment.css('display', 'none');
        		}
        	},
        	style: {
        		width: 300, 
        		classes: 'ui-tooltip-shadow ui-tooltip-white ' + model.data.fs
        	}
        });
	}


	/**
	 * Script que se debe de ejecutar despues de cargar dinámicamente el contenido
	 * del QTip a través de AJAX
	 *
	 * @param data Datos obtenidos del servidor mediante AJAX
	 * @param int noteId Id de la nota a la que corresponden los comentarios
	 *
	 * @return data
	 *         Objeto JQuery a patir de la transformación de los datos especificados.
	 */
    View.prototype.createQTip = function (data, noteId) {
        var self = this
        	, $divCommentWrapper = $('<div>', {Class: 'untCommentWrapper'})
            , $divCommentBlocks = $('<div>', {Class: 'untCommentBlocks'}).appendTo($divCommentWrapper)
			, $divCommentTA = $( views.commentTA( self.noteboard.user.profileImage ) ).appendTo( $divCommentWrapper );

		data.forEach(function(comment){				
			$divCommentBlocks.append( views.commentBlock(comment) );
		});

        $divCommentTA.find('textarea[name="commentTA"]')
            .placeholder({ text: i18n.writeComment, autoResize: true, maxHeight: '70'})
            .keypress(function(e) {
            	var keyCode = e.keyCode || e.which;

                if (keyCode == 13) {
                	if (e.shiftKey) return;
                	
                    e.preventDefault();
                    var $textarea = $(this);

                    if ($textarea.val() == '' || $textarea.val() == i18n.writeComment)
                        return;

                    var args = {
                   		noteId: noteId,
                   		fullname: self.noteboard.user.fullname,
                   		profileImage: self.noteboard.user.profileImage,
                   		message: $textarea.val()
                   	}

                    model.addComment( args );

                    $textarea.val('').placeholder({text: i18n.writeComment});
                }
            });

        return $divCommentWrapper;
    }

	return View;
}
;/**
 * Objeto tipo "Sticky Note" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Objet data Objeto de datos que contiene la información de la nota.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
NoteResource.prototype = Object.create(NoteboardResource.prototype);
function NoteResource( data, noteboard ) {
	var self = this;
	NoteboardResource.call(this, data, noteboard);

	// Aplicando focus en las notas nuevas
	if(this.model.data.isNew) this.view.elems.msg.focus();

	// Escuchando eventos del modelo
	this.model.on('resource-msg', function(name, msg){ self.view.setMsg(msg) });
	this.model.on('resource-bg', function(name, bg){ self.view.setBG(bg) });
	this.model.on('resource-ff', function(name, ff){ self.view.setFF(ff) });
	this.model.on('resource-fs', function(name, fs){ self.view.setFS(fs) });
	this.model.on('resource-c', function(name, c){ self.view.setC(c) });

	this.model.on('resource-attach-zone', function(name, c){ self.view.attachZone() });
}

/**
 * @override Sobre escritura de método View.
 */
NoteResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template.addClass( 'untNote untMenu ' + model.data.bg ).data('attach', model.data.attach).data('bg', model.data.bg);
	view.elems.attach   = $('<div>', {Class: 'icon-attachment'}).appendTo( view.elems.header );
 	view.elems.userLock = $('<img>', {Class: 'user-lock'}).appendTo( view.elems.header );
 	view.elems.msg 		= $('<div>', {Class: 'untNoteContent'
									   		, Name: 'message'
									   		, Spellcheck: 'false'
									   		, contenteditable: 'true'
									   		, maxLength: '500'}).appendTo( view.elems.template );

 	if (model.data.attach && model.data.attach.length > 0)
		view.elems.attach.show();

	// Propiedades y eventos del elemento <msg>
 	var tMsg = null
		,updated = false
		,editing = false
		,lastElem = function(elem) {
						var length = elem.childNodes.length - 1;
						if (length < 0) return elem;
						return lastElem(elem.childNodes[length]);
					}

	// Configurando elemento <msg>
	view.elems.msg
 		.html( model.data.msg )
 		.css({
 			color: model.data.c,
			'font-family': model.data.ff,
			'font-size': model.data.fs,
			height: view.elems.template.height() - 50
		})

		// Gestionando eventos del textarea
		.on('dblclick', function(e){ e.preventDefault(); return false; })
		.on('click', function(e){
			if( model.noteboard.selectedNotes.length != 0 ) {
				var flag = false;
				
				model.noteboard.selectedNotes.forEach(function(m){
					if (m.data.id == model.data.id) {
						flag = true;
						return;
					}
				});

				if (flag) return;
			}

			if (!editing && !model.data.locked && !e.shiftKey) {
				editing = true;
				this.focus();
				view.elems.template.draggable('disable');
				model.noteboard.unselectResources();

				var le = lastElem(this);

				if (le.length) {
					var range = document.createRange()
						,sel = window.getSelection();

					range.setStart(le, le.length);
					range.collapse(true);
					sel.removeAllRanges();
					sel.addRange(range);
				}
			}

			return false;
		})
		.on('focus', function(){ 
			view.elems.template.addClass('focus');
			model.noteboard.noteLock(self);
		})
		.on('blur', function(e){
			if (!model.data.locked)
				view.elems.template.draggable('enable');

			var msg = $(this).html();

			// Change
			if ( model.data.msg != msg  && !updated) {
				model.setMsg({msg: msg});
				clearTimeout(tMsg);
			}

			editing = false;
			if (document.activeElement != this)
				$('#search').focus().blur();

			view.elems.template.removeClass('focus');
			model.noteboard.noteUnlock(self);
		})
		.on('keydown', function(e, keyCode) {
			var text = $(this).text()
				,r = 500 - text.length;

			if (keyCode == 9 || keyCode == 18) {
				e.preventDefault();
			}

		  	if (keyCode == 13) {
		  		document.execCommand('insertHTML', false, '<br><br>');
		  		return false;
		  	}
		})
		.on('keyup', function(e) {
		  	var msg = $(this).html()
		  		text = $(this).text();

		  	if ( model.data.msg != msg) {
				clearTimeout(tMsg);
			  	updated = false;

			  	tMsg = setTimeout(function(){
			  		model.setMsg({msg: msg});
			  		clearTimeout(tMsg);
			  		updated = true;
			  	}, 1000);
			}
		});

	view.elems.attach.on('click', function() {
    	model.attachZone();
    });

    model.noteboard.target.on('click', function() {
    	view.elems.msg.blur();
    });

	/**
	 * Cambia el tamaño de la nota, y ajusta el tamaño del textarea
	 * asociado a ésta.
	 * 
	 * @param int w Valor <width> del elemento principal asociado.
	 * @param int h Valor <height> del elemento principal asociado.
	 */
	View.prototype.setSize = function(w, h) {
		this.elems.template.css({ 'width': w, 'height': h });
		this.elems.msg.css('height', this.elems.template.height() - 50);
	}

	/**
	 * Cambia el texto de la nota por el mensaje especificado.
	 * 
	 * @param string msg Nuevo mensaje para la nota.
	 */
	View.prototype.setMsg = function(msg) {
		this.elems.msg.html(msg);
	}

	/**
	 * Cambia el color de la nota.
	 * 
	 * @param string bg Nuevo color de la nota en hexadecimal.
	 */
	View.prototype.setBG = function(bg) {
		this.elems.template
			.removeClass( this.elems.template.data('bg') )
			.addClass( bg )
			.data('bg', bg)
	}
	
	/**
	 * Cambia el tipo de fuente de la nota.
	 * 
	 * @param string ff Nuevo tipo de fuente de la nota.
	 */
	View.prototype.setFF = function(ff) {
		this.elems.msg.css('font-family', ff);
	}
	
	/**
	 * Cambia el tamaño de fuente de la nota.
	 * 
	 * @param string fs Nuevo tamaño de fuente de la nota.
	 */	
	View.prototype.setFS = function(fs) {
		this.elems.msg.css('font-size', fs);	
	}
	
	/**
	 * Cambia el color de fuente de la nota.
	 * 
	 * @param string c Nuevo color de fuente de la nota.
	 */	
	View.prototype.setC = function(c) {
		this.elems.msg.css('color', c);
	}

	/**
	 * Inhabilita o habilita todos las opciones de edición del recurso
	 * 
	 * @param boolean Determina si se habilita o no las opciones de edición del recurso.
	 * @param Object user Objeto de datos de usuario.
	 * 
	 */
	View.prototype.locked = function(flag, user) {
		if (flag) {
			this.elems.template.draggable('disable');
			this.elems.msg.removeAttr('contenteditable');
			
			if (user) {
				this.elems.userLock.attr('src', user.profileImage)
								   .attr('title', user.fullname + i18n.userEditing)
								   .show();

			}
		} else {
			this.elems.template.draggable('enable');
			this.elems.msg.attr('contenteditable', 'true');
			this.elems.userLock.hide();
		}
	}

	/**
	 * Permite mostar el panel de archivos adjuntos
	 */
	View.prototype.attachZone = function() {
		var self = this;

		$.untInputWin({
			content: views.formAttachFile(model.data.id, model.noteboard.id),
			classes: 'dropzone',
			width: '100%'
		});

		var dz = new Dropzone("#uploadDropzone", {
			previewTemplate: views.attachFileBlock(),
			maxFilesize: model.noteboard.user.maxFileSize,
			maxFiles: model.noteboard.user.maxFiles,
			success: function(file, data, event) {
				data.size = Math.round(data.size/10000) / 100;
				data.src = $(file.previewElement).find('[data-dz-thumbnail]').attr('src');
				
				self.noteboard.sandbox.emit('note-attach-add', data);
				
				file.previewElement.setAttribute('data-attach', data.name);

				return file.previewElement.classList.add("dz-success");
			},
			error: function(file, data, event) {
				var previewElement = $(file.previewElement);
				previewElement.find('.dz-download').remove();
				previewElement.find('.dz-remove').remove();
				previewElement.find('.dz-delete').css('display', 'block');
				previewElement.find('.dz-error-message').html(data);

				return file.previewElement.classList.add("dz-error");
			}
		});

		var attach = this.elems.template.data('attach')
			, len = attach.length;

		if (attach != undefined) {
			for (var i = len - 1; i >= 0; i--) {
				$('#uploadDropzone').append( views.attachFileBlock( attach[i]) );
			}

			dz.options.maxFiles = dz.options.maxFiles - len;
		}

		untInputWinCenter();
	}


	return view;
}
;/**
 * Objeto tipo "Circle" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Objet data Objeto de datos que contiene la información del video.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
CircleResource.prototype = Object.create(NoteboardResource.prototype);
function CircleResource( data, noteboard ) {
	NoteboardResource.call(this, data, noteboard);
}

/**
 * @override Sobre escritura de método View.
 */
CircleResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template
		.addClass('untCircle untMenuCircle ' + model.data.bg)

	view.elems.header.remove();
	view.elems.shadow.remove();
	
	return view;
 }
;/**
 * Objeto tipo "Image" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Objet data Objeto de datos que contiene la información de la imagen.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
ImageResource.prototype = Object.create(NoteboardResource.prototype);
function ImageResource( data, noteboard ) {
	NoteboardResource.call(this, data, noteboard);
}

/**
 * @override Sobre escritura de método View.
 */
ImageResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template
		.addClass('untImage untMenuImage')
		.css('background-image', 'url(' + CDN_IMAGES + model.data.msg + ')')
		.data('imageName', model.data.msg)
		.on('click', function(e){
    		if (e.ctrlKey) {
    			$.untInputWin('<img class="untWinImage" src="' + CDN_IMAGES + model.data.msg + '">');
    		}
    	});

	view.elems.shadow.remove();	
	
	return view;
 }
;/**
 * Objeto tipo "Video" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Objet data Objeto de datos que contiene la información del video.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
VideoResource.prototype = Object.create(NoteboardResource.prototype);
function VideoResource( data, noteboard ) {
	NoteboardResource.call(this, data, noteboard);
}

/**
 * @override Sobre escritura de método View.
 */
VideoResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template
		.addClass('untVideo untMenuVideo')
		.append('<iframe src="' + model.data.msg + '" width="95%" height="85%" allowfullscreen></iframe>');
	
	return view;
 }
;/**
 * Objeto tipo "Frame" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Object data Objeto de datos que contiene la información del frame.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
FrameResource.prototype = Object.create(NoteboardResource.prototype);
function FrameResource( data, noteboard ) {
	var self = this;

	NoteboardResource.call(this, data, noteboard);

	// Cambiando de parent
	$('#timeline').append( this.view.elems.template );
	this.view.addTimelinePreview();

	// Escuchando eventos del modelo
	this.model.on('resource-msg', function(name, msg){ self.view.setMsg(msg) });
	noteboard.areas[data.msg - 1] = this;
}

/**
 * @override Sobre escritura de método View.
 */
FrameResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template.addClass('untFrame untMenuFrame ' + model.data.bg);
	view.elems.cell = $('<div>',{ Class: 'untFrameCell'}).appendTo( view.elems.template );
	view.elems.number = $('<div>',{ Class: 'untFrameNumber'}).appendTo( view.elems.cell ).html(model.data.msg);

	view.elems.header.remove();
	view.elems.shadow.remove();

	/**
	 * Elimina del DOM el template del recurso asociado, además 
	 * del previsualizador del timeline
	 */
	View.prototype.remove = function() {
		this.elems.template.remove();
		this.elems.preview.remove();
	}

	/**
	 * Añade un recuadro de preview al timeline
	 */
	View.prototype.addTimelinePreview = function() {
		this.elems.preview = $('<li>', {Class: 'untFrame'}).data('model', model).attr('index', model.data.msg);
		this.elems.previewCell = $('<div>', {Class: 'untFrameCell'}).appendTo( this.elems.preview );
		this.elems.previewNumber = $('<div>', {Class: 'untFrameNumber'}).html( model.data.msg ).appendTo( this.elems.previewCell );
								
		this.elems.preview.on('click', function(){
			model.noteboard.showArea(model);
		});

		var timelinePanel = $('#timelinePanel');
		if (timelinePanel.data('jsp')) {
			timelinePanel.find('ul').append( this.elems.preview );
			timelinePanel.data('jsp').reinitialise();
		}
	}

	/**
	 * Cambia el index tanto del area como el preview desde el timelinePanel
	 *
	 * @param int msg Valor de index del timeline para el recurso.
	 */
	View.prototype.setMsg = function(msg) {
		this.elems.number.html(msg);
		this.elems.previewNumber.html(msg);
		this.elems.preview.insertAfter( $('#timelinePanel ul li:eq(' + (msg-1) + ')') );
	}
	
	return view;
 }
;/**
 * Objeto tipo "Comment" que será usado como recurso del <noteboard>. Este objeto
 * hereda del tipo base NoteboardResource
 * 
 * @param Objet data Objeto de datos que contiene la información del comentario.
 * @param Module noteboard Módulo que contiene la información del noteboard.
 */
CommentResource.prototype = Object.create(NoteboardResource.prototype);
function CommentResource( data, noteboard ) {
	NoteboardResource.call(this, data, noteboard);

	noteboard.sandbox.on('noteboard-mousewheel', this.view.zoomResize);
	this.view.zoomResize();
}

/**
 * @override Sobre escritura de método View.
 */
CommentResource.prototype.View = function() {
	var self = this
		, model = this.model
		, View = NoteboardResource.prototype.View.call( this, model )
		, view = new View();

	view.elems.template.addClass('untComment untMenuComment ' + model.data.bg).data('bg', model.data.bg);
	view.elems.pin = $('<div>',{ Class: 'untCommentPin'}).prependTo( view.elems.template );

	view.elems.shadow.remove();
	view.elems.resize.remove();

	/**
	 * Cambia el tamaño en el DOM del recurso en cuestión.
	 * 
	 * @param int w Valor <width> del elemento principal asociado.
	 * @param int h Valor <height> del elemento principal asociado.
	 * @override
	 */
	View.prototype.setSize = function(w, h) {
		return false;
	}

	/**
	 * Redimensiona el tamaño del comentario de acuerdo al zoom establecido
	 */
	View.prototype.zoomResize = function() {
		var scale = (1/model.noteboard.scale);

		view.elems.template.css({
			'-webkit-transform' : 'scale(' + scale + ')',
			'-moz-transform' : 'scale(' + scale + ')',
			'transform' : 'scale(' + scale + ')'
		});
	}
	
	return view;
}
;// -------------
// MODELO
// -------------
NoteboardModel.prototype = new Observable();
function NoteboardModel( data ) {
	this.data = data;
	this.data.ctype = data.type.charAt(0).toUpperCase() + data.type.slice(1);

}NoteboardModel.prototype.setName = function(name) {
	this.data.name = name;
	this.trigger('noteboard-name', name);
}
NoteboardModel.prototype.setDescription = function(description) {
	this.data.description = description;
	this.trigger('noteboard-description', description);
}
NoteboardModel.prototype.setVisibility = function(visibility) {
	this.data.visibility = visibility;
	this.trigger('noteboard-visibility', visibility);
}
NoteboardModel.prototype.setParentId = function(parentId) {
	this.data.changeParent = (this.data.parentId != parentId);

	this.data.parentId = parentId;
	this.trigger('noteboard-parentId', parentId);
}
NoteboardModel.prototype.setCategoryId = function(categoryId) {
	this.data.categoryId = categoryId;
}


// -----------------------------
// BASE PARA CUALQUIER NOTEBOARD
// -----------------------------
function NoteboardBase( data ) {
	var self = this;

	this.model = new NoteboardModel( data );
	this.view = this.View( this.model.data );

	// Escuchando eventos de la vista
	this.view.on('noteboard-share', function(){ self.Share() });
	this.view.on('noteboard-edit', function(){ self.Edit() });
	this.view.on('noteboard-delete', function(){ self.Delete() });

	// Escuchando eventos del modelo
	this.model.on('noteboard-name', function(e, name){ self.view.setName(name) });
	this.model.on('noteboard-description', function(e, description){ self.view.setDescription(description) });
	this.model.on('noteboard-visibility', function(e, visibility){ self.view.setVisibility(visibility) });
	this.model.on('noteboard-parentId', function(e, parentId){ self.view.setParentId(parentId) });
}
NoteboardBase.prototype.Share = function() {
	var self = this;

	$.untInputWin({
		title: eval('i18n.share' + this.model.data.ctype),
		content: ROOT_URL + 'Noteboard/ShareManager/' + this.model.data.id,
		clickAccept: function() {
			
			var serialize = $('#frmNoteboardShare').serialize();

			if ($.trim(serialize) == '') {
				$('#frmNoteboardShare .untPlgMsg').untInputMsg({
					content: i18n.errSelectCollaborator,
					type: 'Err'
				}).show();

				return false;
			}

			// TODO: Deshabilitando boton ventana modal
			$('.btnWinAccept').attr('disabled', 'true').removeClass('yellow');

			$.post(
				ROOT_URL + 'Noteboard/Share/' + self.model.data.id,
				$('#frmNoteboardShare').serialize(),
				function() {
					untInputWinRemove();
				}
			);

			return false;
		},
		onLoadContent: function() {
			$('#frmNoteboardShare').on('submit', function(){ return false; });
			$('.untWin .btnWinAccept').html(i18n.sendInvitation);
			$('.untWin .btnWinCancel').html(i18n.closeWindow);

			$('#contact')
				.on('keypress', function(){
					$('.untPlgMsg').html('');
				})
				.autocomplete({
					source: function(request, response) {
						$.getJSON(
							API + 'User/Search/?term=' + request.term + '&noteboardId=' + self.model.data.id,
							function(data) {
								response(data);
							}
						);
					},
					select : function(event, ui) {
						var $user = $('<div>',{Class: 'untShareUser'}).appendTo( $('#collaborators') )
							, $profileImage = $('<div>', {Class : 'untInline'}).append('<img src="' + ui.item.label.profileImage + '" width="35px">').appendTo($user)
							, $profile = $('<div>', {Class: 'profile untInline'}).appendTo($user)
							, $name = $('<div>', {Class: 'name'}).html(ui.item.label.fullname).appendTo($profile)
							, $email = $('<div>', {Class: 'email'}).html(ui.item.label.email).appendTo($profile)
							// , $btnPerm = $('<div>', {Class: 'permissions icon-cog'}).prependTo($user)
							, $btnDel = $('<div>', {Class: 'delete icon-cancel-circle'}).prependTo($user).on('click', function(){ $user.remove(); })
							, $input = $('<input>', {type: 'hidden', name: 'collaborators[]', value: ui.item.value}).appendTo($user);

						$(this).val('').focus();
						return false;
					},
					minLength: 3
				})
				.data('ui-autocomplete')._renderItem = function(ul, item) {
					var exit = false;
					$('#collaborators').find('[value]').each(function(){ if (this.value == item.value) exit = true; });

					if (exit)
						return $('').data('ui-autocomplete-item', item);

					var $user = $('<a>',{Class: 'untShareUser'})
						, $profileImage = $('<div>', {Class : 'untInline'}).append('<img src="' + item.label.profileImage + '" width="35px">').appendTo($user)
						, $profile = $('<div>', {Class: 'profile untInline'}).appendTo($user)
						, $name = $('<div>', {Class: 'name'}).html(item.label.fullname).appendTo($profile)
						, $email = $('<div>', {Class: 'email'}).html(item.label.email).appendTo($profile);

					return $("<li>")
							.data('ui-autocomplete-item', item)
							.append( $user )
							.appendTo(ul);
				};


			// Eliminar usuario compartido desde ventana "Compartir Tablero"
			$('#collaboratorsContainer .delete').on('click', function(){
			    var $this = $(this);
    
			    $.untInputWin({
			        title: i18n.deleteCollaborator,
			        content: i18n.deleteCollaboratorMsg,
			        btnCancel: true,
			        width: '300',
			        clickAccept: function() {           
			            $.ajax({
			                url: API + 'Noteboard/Unshare/' + $this.data('id'),
			                data: { 'userId' : $this.data('userid') },
			                type: 'POST',
			                dataType: 'json',
			                success: function(data) {
			                    $this.parent().remove();
			                },
			            });
			        }
			    });
			});

			// Cambiando permisos de colaborador
			$('#collaboratorsContainer .permissions').on('click', function(){
			    var $this = $(this)
			        ,userId = $this.data('userid')
			        ,permissions = {
			                            'noteboardId': $this.attr('data-id'),
			                            'canEdit': $this.attr('data-canedit'),
			                            'canComment': $this.attr('data-cancomment'),
			                            'canDelete': $this.attr('data-candelete'),
			                            'canUploadFiles': $this.attr('data-canuploadfiles'),
			                            'canDeleteAttach': $this.attr('data-candeleteattach'),
			                            'canInvite': $this.attr('data-caninvite'),
			                        };

			    $.untInputWin({
			        title: i18n.userPermissions,
			        content: views.permissionsForm( permissions ),
			        clickAccept: function() {
			            
			            $.ajax({
			                url: ROOT_URL + 'User/Permissions/' + userId,
			                data: $('#permissionsForm').serialize(),
			                type: 'POST',
			                dataType: 'json',
			                success: function(data) {
			                    $this.attr('data-canedit', data.canEdit);
			                    $this.attr('data-cancomment', data.canComment);
			                    $this.attr('data-candelete', data.canDelete);
			                    $this.attr('data-canuploadfiles', data.canUploadFiles);
			                    $this.attr('data-candeleteattach', data.canDeleteAttach);
			                    $this.attr('data-caninvite', data.canInvite);
			                    untInputWinRemove();
			                }
			            });

			            return false;
			        }
			    })
			});
		}
	});
}
NoteboardBase.prototype.Delete = function() {
	var self = this,
		content = eval('i18n.delete' + this.model.data.ctype + 'Msg');

	if (!this.model.data.user.owner)
		content = eval('i18n.unshare' + this.model.data.ctype + 'Msg');

	$.untInputWin({
		title: eval('i18n.delete' + this.model.data.ctype),
		content: content,
		maxWidth: '300px',
		clickAccept: function() {
			$.ajax({
				url: API + 'Noteboard/' + self.model.data.id,
				type: 'DELETE',
				dataType: 'json',
				success: function(data) {
					if (self.model.data.type == 'noteboard') {
						self.template().remove();
					} else {
						location.hash = '';
						_getFolderScheme();
					}
				}
			});

			untInputWinRemove();
		}
	});	
}
NoteboardBase.prototype.Edit = function() {
	var self = this;

	$.untInputWin({
		title: eval('i18n.edit' + this.model.data.ctype),
		content: ROOT_URL + 'Noteboard/Manager/' + this.model.data.id + '?type=' + this.model.data.type,
		width: '400',
		clickAccept: function() {
			if (!$('#noteboardForm').valid())
				return false;
			
			$.ajax({
				url: API + 'Noteboard/' + self.model.data.id,
				type: 'PUT',
				dataType: 'json',
				data: $('#noteboardForm').serialize(),
				success: function(data) {
					self.model.setName( data.name );
					self.model.setDescription( data.description );
					self.model.setVisibility( data.visibility );
					self.model.setParentId( data.parentId );
					self.model.setCategoryId( data.categoryId );
					untInputWinRemove();
				}
			});

			return false;
		},
		onLoadContent: function() {
			var select = $('#slcParent');
			
			select.append(options.html());
			select.find('option[value=' + self.model.data.parentId + ']').attr('selected', 'selected');
			select.find('option[value=' + self.model.data.id + ']').remove();

			if (self.RemoveChildrenOption) self.RemoveChildrenOption(self.model.data.children, select);
			$('.untWin .untHelper').qtip({ style: {classes: 'qtip-untHelper'} });

			// Validación
			$('#noteboardForm').validate({
			    success: 'valid',
			    rules: {
			        name: {
			            required: true,
			        }
			    },
			    messages: {
			        name: {
			            required: eval('i18n.errName' + self.model.data.ctype),
			        }
			    }
			});

			if (self.model.data.type == 'noteboard')
				$('.untCategoryItems').jScrollPane().data('jsp').scrollToX((self.model.data.categoryId - 1) * 80);

		}
	});
}
NoteboardBase.prototype.template = function() {
	return this.view.elems.template;
}


// -------------------------
// OBJETO NOTEBOARD
// -------------------------
Noteboard.prototype = Object.create(NoteboardBase.prototype)
function Noteboard( noteboard, noUpdate ) {
	NoteboardBase.call(this, noteboard);

	if (!noUpdate)
		this.UpdateThumbails();
}
Noteboard.prototype.View = function( noteboard ) {
	var self = this;

	View.prototype = new Observable();
	function View() {
		var _this = this;

		this.elems = {};
		this.elems.template 	= $('<div>', {Class: 'untNoteboard'}).draggable({ revert: true, opacity: 0.5, helper: 'clone'}).data('model', self.model);

		this.elems.options 		= $('<div>', {Class: 'options untInline'}).appendTo(this.elems.template);
		this.elems.edit 		= $('<div>', {Class: 'edit icon-pencil', title: i18n.edit}).appendTo(this.elems.options).qtip();
		this.elems.share 		= $('<div>', {Class: 'share icon-users', title: i18n.share}).appendTo(this.elems.options).qtip();
		this.elems.delete 		= $('<div>', {Class: 'delete icon-remove', title: i18n.delete}).appendTo(this.elems.options).qtip();

		this.elems.leftContent 	= $('<div>', {Class: 'leftContent'}).appendTo(this.elems.template);
		this.elems.preview 		= $('<a>', 	 {Class: 'preview untInline', href: ROOT_URL + 'Noteboard/App/' + noteboard.url}).appendTo(this.elems.leftContent);
		this.elems.previewImage = $('<img>', {Class: 'previewImage', width: '158px', height: '115px', src: BLOB_IMAGES + 'preview_' + noteboard.url + '.jpg?cache=' + noteboard.cache}).appendTo(this.elems.preview);
		this.elems.profileImage = $('<img>', {Class: 'profileImage', width: '30px', height: '30px', src: noteboard.user.profileImage, title: i18n.createBy + noteboard.user.fullname}).appendTo(this.elems.preview).qtip();

		this.elems.name 		= $('<div>', {Class: 'name'}).html(noteboard.name).appendTo(this.elems.leftContent);
		this.elems.description 	= $('<div>', {Class: 'description'}).html(noteboard.description).appendTo(this.elems.leftContent);

		this.elems.private 		= $('<div>', {Class: 'private icon-lock', title: i18n.private}).appendTo(this.elems.template).qtip();
		this.elems.public 		= $('<div>', {Class: 'public icon-unlocked', title: i18n.public}).appendTo(this.elems.template).qtip();

		// Delegación de click's compartidos por los diferentes tipos
		this.elems.share.on('click', function() { _this.trigger('noteboard-share'); return false; });
		this.elems.delete.on('click', function() { _this.trigger('noteboard-delete'); return false; });
		this.elems.edit.on('click', function() { _this.trigger('noteboard-edit'); return false; });

		this.setVisibility(noteboard.visibility);
	}
	View.prototype.setName = function(name) {
		this.elems.name.html(name)
	}
	View.prototype.setDescription = function(description) {
		this.elems.description.html(description)
	}
	View.prototype.setVisibility = function(visibility) {
		switch( visibility ) {
			case 'private':
				this.elems.private.show();
				this.elems.public.hide();
				break;

			case 'public':
				this.elems.public.show();
				this.elems.private.hide();
				break;
		}
	}
	View.prototype.setParentId = function() {
		if (self.model.data.changeParent) {
			this.elems.template.remove();
		}
	}
	View.prototype.ChangingThumbails = function() {
		this.elems.previewImage.css('opacity', '0.3');
		this.elems.preview.prepend('<img src="' + WEBROOT_URL + 
				'img/default/loader.gif" alt="Loader" class="untLoader" width="30px" height="30px">');
	}
	View.prototype.setThumbails = function(data) {
			this.elems.previewImage.attr('src', BLOB_IMAGES + 'preview_' + noteboard.url + '.jpg?cache=' + data.cache);
			this.elems.preview.find('.untLoader').remove();
			this.elems.previewImage.css('opacity', '1');
	}

	return new View();
}
Noteboard.prototype.UpdateThumbails = function() {
	var self = this;

	if (this.model.data.modified) {
		this.view.ChangingThumbails();		

		$.getJSON(
			'Noteboard/PreviewRefresh/' + this.model.data.url,
			function(data) {
				setTimeout(function(){
					self.view.setThumbails(data);
				},2000);
			}
		);
	}
}
Noteboard.prototype.LoadNoteboards = function( parentId ) {
	$('.untNoteboard').remove();
	$('.untMainContent').find('.untLoader').show();
	$('.untMainContent').find('.untEmpty').hide();

	$.getJSON(
		API + 'Noteboard/Children/' + parentId,
		function(data) {
			$('#btnAddNoteboard').show();

			if (data.length) {
				data.forEach(function(noteboard) {
					var nb = new Noteboard(noteboard);
					$('.untMainContent').append( nb.template() );
				});
			} else {
				$('.untMainContent').find('.untEmpty').show();
			}
			
			$('.untMainContent').find('.untLoader').hide();
		}
	);
}



// -------------------------
// FOLDER OBJECT
// -------------------------
Folder.prototype = Object.create(NoteboardBase.prototype);
function Folder( folder ) {
	var self = this;

	NoteboardBase.call(this, folder);
	this.view.on('branch-clicked', function(){ self.BranchClicked() });
}
Folder.prototype.View = function( noteboard ) {
	var self = this;

	View.prototype = new Observable();
	function View() {
		var _this = this;

		this.elems = {};		
		this.elems.template  = $('<li>', {id: 'subtree-' + noteboard.id}).draggable({ revert: true, opacity: 0.5, helper: 'clone'}).data('model', self.model);
		this.elems.link		 = $('<a>', {href: '#!/folder/' + noteboard.id, Class: 'unt' + noteboard.ctype + ' ' + noteboard.type })
										.data('folder', noteboard.id).appendTo(this.elems.template)
										.attr('data-a', 'a')
										.droppable({
											hoverClass: "ui-state-hover",
											tolerance: 'pointer',
											drop: this.changeParent
										});
		this.elems.icon		 = $('<span>', {Class: 'icon- ' + noteboard.type}).appendTo(this.elems.link);
		this.elems.name		 = $('<span>', {Class: 'name'}).html(noteboard.name).appendTo(this.elems.link);
		this.elems.edit		 = $('<span>', {Class: 'edit icon-cog'}).appendTo(this.elems.link);
		this.elems.share	 = $('<span>', {Class: 'share icon-users'}).appendTo(this.elems.link);
		this.elems.delete 	 = $('<span>', {Class: 'delete icon-remove'}).appendTo(this.elems.link);
		this.elems.ul 		 = $('<ul>').appendTo(this.elems.template);

		// Delegación de click's
		this.elems.share.on('click', function() { _this.trigger('noteboard-share'); return false; });
		this.elems.delete.on('click', function() { _this.trigger('noteboard-delete'); return false; });
		this.elems.edit.on('click', function() { _this.trigger('noteboard-edit'); return false; });
		this.elems.link.on('click', function() { _this.trigger('branch-clicked') });
	}
	View.prototype.setName = function(name) {
		this.elems.name.html(name)
		options.find('option[value=' + self.model.data.id + ']').html(name);
	}
	View.prototype.setDescription = function(description) {}
	View.prototype.setVisibility = function(visibility) {}
	View.prototype.setParentId = function(parentId) {
		if (self.model.data.changeParent) {
			_getFolderScheme();
		}
	}
	View.prototype.changeParent = function(evt, ui) {
		var model = ui.draggable.data('model');

		if (self.model.data.id == model.data.parentId) return;
		
		if(model.data.type == 'group') {
			$.untInputWin({ title: i18n.invalidMovement, content: i18n.invalidMovementMsg })
			return;
		}

		model.data.parentId = self.model.data.id; //Cambiando Padre

		$.ajax({
			url: API + 'Noteboard/' + model.data.id,
			data: model.data,
			type: 'PUT',
			dataType: 'json',
			success: function(data) {
				if (model.data.type == 'folder')
					_getFolderScheme();
				else
					ui.draggable.remove();
			}
		})
	}
	
	return new View();
}
Folder.prototype.BranchClicked = function() {
	$('.selected').removeClass('selected');
	this.view.elems.link.addClass('selected');

	if ( this.template().hasClass('expandable') )
		this.template().find('> .hitarea').click();

	// TODO: Modificando elemento externo
	$('#noteboardsDesigned').hide();

	Noteboard.prototype.LoadNoteboards.call( this, this.model.data.id );
}
Folder.prototype.RemoveChildrenOption = function(children, select) {
	var self = this;

	if (children)
		for (var i = children.length - 1; i >= 0; i--) {
			self.RemoveChildrenOption( children[i].children, select);
			select.find('option[value=' + children[i].id + ']').remove();
		}	
}
Folder.prototype.getSubTree = function() {
	return this.view.elems.ul;
}